document.addEventListener('DOMContentLoaded', function() {
    // ========== –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã ==========
    const themeToggle = document.getElementById('themeToggle');
    const body = document.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
        body.classList.add('dark');
        themeToggle.textContent = 'üåû –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞';
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
    themeToggle.addEventListener('click', function() {
        body.classList.toggle('dark');
        const isDark = body.classList.contains('dark');
        themeToggle.textContent = isDark ? 'üåû –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞' : 'üåì –¢—ë–º–Ω–∞—è —Ç–µ–º–∞';
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });

    // ========== –ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ==========
    let currentIndex = 0;
    const images = document.querySelectorAll('.gallery-img');
    const totalImages = images.length;
    let galleryInterval;

    // –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    function showImage(index) {
        images.forEach(img => img.classList.remove('active'));
        images[index].classList.add('active');
        currentIndex = index;
        resetGalleryInterval();
    }

    // –°–±—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    function resetGalleryInterval() {
        clearInterval(galleryInterval);
        galleryInterval = setInterval(() => {
            currentIndex = (currentIndex + 1) % totalImages;
            showImage(currentIndex);
        }, 3000);
    }

    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.getElementById('nextBtn').addEventListener('click', () => {
        showImage((currentIndex + 1) % totalImages);
    });

    document.getElementById('prevBtn').addEventListener('click', () => {
        showImage((currentIndex - 1 + totalImages) % totalImages);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∞–ª–µ—Ä–µ–∏
    showImage(0);
    resetGalleryInterval();

    // ========== –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ==========
    const form = document.getElementById('feedbackForm');
    const formMessage = document.getElementById('formMessage');
    const submitBtn = document.getElementById('submitBtn');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    function validateEmail(email) {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(email);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    function showMessage(text, type) {
        formMessage.textContent = text;
        formMessage.className = type;
        formMessage.classList.remove('hidden');
        
        setTimeout(() => {
            formMessage.classList.add('hidden');
        }, 5000);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è email
            const emailInput = form.querySelector('input[type="email"]');
            if (!validateEmail(emailInput.value)) {
                showMessage("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email", "error");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ reCAPTCHA
            if (typeof grecaptcha === 'undefined' || !grecaptcha.getResponse()) {
                showMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç", "error");
                return;
            }

            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            submitBtn.disabled = true;
            submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            const response = await fetch(form.action, {
                method: 'POST',
                body: new FormData(form),
                headers: { 
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });

            if (response.ok) {
                showMessage("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–∫–æ—Ä–æ –æ—Ç–≤–µ—á—É.", "success");
                form.reset();
                
                // –°–±—Ä–æ—Å reCAPTCHA
                if (window.grecaptcha) {
                    grecaptcha.reset();
                    submitBtn.disabled = true;
                }
            } else {
                throw new Error(await response.text());
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            showMessage("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", "error");
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
        }
    });

    // ========== –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å ==========
    const postButton = document.getElementById('postButton');
    const postContent = document.getElementById('postContent');
    const postsContainer = document.getElementById('postsContainer');
    const authModal = document.getElementById('authModal');
    const closeModal = document.querySelector('.close');
    const authForm = document.getElementById('authForm');
    const registerBtn = document.getElementById('registerBtn');

    // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    let currentUser = null;

    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    function toggleAuthModal() {
        authModal.classList.toggle('hidden');
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ localStorage
    function getUsers() {
        return JSON.parse(localStorage.getItem('users')) || [];
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function registerUser(username, password) {
        const users = getUsers();
        
        if (users.some(u => u.username === username)) {
            alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return false;
        }
        
        users.push({ username, password });
        localStorage.setItem('users', JSON.stringify(users));
        return true;
    }

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function loginUser(username, password) {
        const users = getUsers();
        const user = users.find(u => u.username === username && u.password === password);
        
        if (user) {
            currentUser = username;
            localStorage.setItem('currentUser', username);
            return true;
        }
        
        return false;
    }

    // –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function logoutUser() {
        currentUser = null;
        localStorage.removeItem('currentUser');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    function checkAuth() {
        const user = localStorage.getItem('currentUser');
        if (user) {
            currentUser = user;
            return true;
        }
        return false;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ localStorage
    function loadPosts() {
        const posts = JSON.parse(localStorage.getItem('posts')) || [];
        postsContainer.innerHTML = '';
        
        posts.forEach((post, index) => {
            const postElement = document.createElement('div');
            postElement.className = 'post';
            postElement.innerHTML = `
                <div class="post-header">
                    <strong>${post.author || '–ê–Ω–æ–Ω–∏–º'}</strong>
                    ${currentUser === post.author ? 
                      `<button class="delete-post" data-id="${index}">–£–¥–∞–ª–∏—Ç—å</button>` : ''}
                </div>
                <div class="post-content">${post.content}</div>
                <div class="post-actions">
                    <button class="like-btn" data-id="${index}">
                        ${post.likes?.includes(currentUser) ? '‚ù§Ô∏è' : 'ü§ç'} ${post.likes?.length || 0}
                    </button>
                </div>
                <div class="post-date">${new Date(post.date).toLocaleString()}</div>
            `;
            postsContainer.prepend(postElement);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–∞–π–∫–æ–≤
        document.querySelectorAll('.like-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                if (!currentUser) {
                    toggleAuthModal();
                    return;
                }
                toggleLike(parseInt(this.dataset.id));
            });
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        document.querySelectorAll('.delete-post').forEach(btn => {
            btn.addEventListener('click', function() {
                deletePost(parseInt(this.dataset.id));
            });
        });
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
    function addPost() {
        if (!currentUser) {
            toggleAuthModal();
            return;
        }
        
        const content = postContent.value.trim();
        if (!content) return;
        
        const posts = JSON.parse(localStorage.getItem('posts')) || [];
        const newPost = {
            content: content,
            author: currentUser,
            date: new Date().toISOString(),
            likes: []
        };
        
        posts.push(newPost);
        localStorage.setItem('posts', JSON.stringify(posts));
        
        postContent.value = '';
        loadPosts();
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    function deletePost(postId) {
        const posts = JSON.parse(localStorage.getItem('posts')) || [];
        if (posts[postId]?.author === currentUser) {
            posts.splice(postId, 1);
            localStorage.setItem('posts', JSON.stringify(posts));
            loadPosts();
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–æ–≤
    function toggleLike(postId) {
        const posts = JSON.parse(localStorage.getItem('posts')) || [];
        const post = posts[postId];
        
        if (!post.likes) post.likes = [];
        
        const userIndex = post.likes.indexOf(currentUser);
        if (userIndex === -1) {
            post.likes.push(currentUser);
        } else {
            post.likes.splice(userIndex, 1);
        }
        
        localStorage.setItem('posts', JSON.stringify(posts));
        loadPosts();
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    if (postButton && postContent && postsContainer) {
        postButton.addEventListener('click', addPost);
        postContent.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                addPost();
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeModal.addEventListener('click', toggleAuthModal);
    authForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        
        if (loginUser(username, password)) {
            toggleAuthModal();
            loadPosts();
        } else {
            alert('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!');
        }
    });
    
    registerBtn.addEventListener('click', function() {
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        
        if (registerUser(username, password)) {
            alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.');
        }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    checkAuth();
    loadPosts();

    // ========== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ reCAPTCHA ==========
    function checkRecaptchaLoad() {
        if (typeof grecaptcha === 'undefined') {
            console.error('reCAPTCHA –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å');
            showMessage("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "error");
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(checkRecaptchaLoad, 5000);
});
registerBtn.addEventListener('click', function() {
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    
    if (registerUser(username, password)) {
        loginUser(username, password); // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        toggleAuthModal();
        loadPosts();
    }
});
function checkAuth() {
    const user = localStorage.getItem('currentUser');
    if (user) {
        currentUser = user;
        return true;
    } else {
        toggleAuthModal(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        return false;
    }
}
if (!username || !password) {
    alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
    return;
}
authModal.addEventListener('click', (e) => {
    if (e.target === authModal) {
        toggleAuthModal();
    }
});
// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è reCAPTCHA
function onRecaptchaSuccess() {
    const submitBtn = document.getElementById('submitBtn');
    if (submitBtn) {
        submitBtn.disabled = false;
    }
}